name: Deploy Glue (UAT / PROD - Smart Pipeline)

on:
  push:
    paths:
      - "glue/jobs.yaml"
      - "glue/scripts/**"

permissions:
  contents: read
  issues: write

env:
  TERRAFORM_VERSION: 1.7.2
  AWS_REGION_UAT: us-east-1
  AWS_REGION_PROD: me-central-1

jobs:
  # ==========================================================
  # 1Ô∏è‚É£ VALIDATE TERRAFORM (UAT + PROD)
  # ==========================================================
  validate:
    name: üîç Terraform Init & Validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Setup AWS credentials (needed for backend S3 access)
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION_UAT }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init (UAT)
        working-directory: glue/envs/uat
        run: terraform init -backend-config=backend-uat.tfvars

      - name: Terraform Validate (UAT)
        working-directory: glue/envs/uat
        run: terraform validate || true

      - name: Terraform Init (PROD)
        working-directory: glue/envs/prod
        run: terraform init -backend-config=backend-prod.tfvars

      - name: Terraform Validate (PROD)
        working-directory: glue/envs/prod
        run: terraform validate || true

  # ==========================================================
  # 2Ô∏è‚É£ APPROVE DEPLOYMENT TO UAT?
  # ==========================================================
  approve-uat-deploy:
    name: üü° Approve UAT Deployment?
    needs: [validate]
    runs-on: ubuntu-latest
    steps:
      - name: Manual Approval - Deploy to UAT?
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: mostafasookar
          minimum-approvals: 1
          issue-title: "Approve Deploy to UAT?"
          issue-body: |
            Approve to run Terraform plan/apply for UAT.
            If declined, pipeline will skip UAT and move to PROD approval.

  # ==========================================================
  # 3Ô∏è‚É£ PLAN UAT
  # ==========================================================
  plan-uat:
    name: üß™ UAT - Terraform Plan
    needs: [approve-uat-deploy]
    if: ${{ needs.approve-uat-deploy.result == 'success' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: glue/envs/uat
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION_UAT }}
      - uses: hashicorp/setup-terraform@v3
      - run: terraform init -backend-config=backend-uat.tfvars
      - run: terraform plan -out=tfplan-uat
      - uses: actions/upload-artifact@v4
        with:
          name: tfplan-uat
          path: glue/envs/uat/tfplan-uat

  # ==========================================================
  # 4Ô∏è‚É£ APPROVE APPLY TO UAT?
  # ==========================================================
  approve-uat-apply:
    name: ‚úÖ Approve Apply to UAT?
    needs: [plan-uat]
    if: ${{ needs.plan-uat.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Manual Approval - Apply to UAT?
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: mostafasookar
          minimum-approvals: 1
          issue-title: "Approve Apply to UAT?"
          issue-body: |
            Approve to apply Terraform plan in UAT.
            If declined, pipeline will skip UAT apply and move to PROD.

  # ==========================================================
  # 5Ô∏è‚É£ APPLY UAT
  # ==========================================================
  apply-uat:
    name: üöÄ Apply UAT
    needs: [approve-uat-apply]
    if: ${{ needs.approve-uat-apply.result == 'success' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: glue/envs/uat
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION_UAT }}
      - uses: hashicorp/setup-terraform@v3
      - uses: actions/download-artifact@v4
        with:
          name: tfplan-uat
          path: glue/envs/uat
      - run: terraform init -backend-config=backend-uat.tfvars
      - run: terraform apply -auto-approve tfplan-uat

  # ==========================================================
  # 6Ô∏è‚É£ APPROVE PROMOTION TO PROD?
  # ==========================================================
  approve-promote-prod:
    name: üîí Approve Promotion to PROD?
    needs: [validate]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Manual Approval - Promote to PROD?
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: mostafasookar
          minimum-approvals: 1
          issue-title: "Approve Promotion to PROD?"
          issue-body: |
            Approve to start Terraform plan/apply in PROD.
            If declined, pipeline will stop here.

  # ==========================================================
  # 7Ô∏è‚É£ PLAN PROD
  # ==========================================================
  plan-prod:
    name: üß© PROD - Terraform Plan
    needs: [approve-promote-prod]
    if: ${{ needs.approve-promote-prod.result == 'success' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: glue/envs/prod
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION_PROD }}
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform Init (PROD)
        run: terraform init -backend-config=backend-prod.tfvars
      - name: Terraform Validate (PROD)
        run: terraform validate || true
      - name: Terraform Plan (PROD)
        run: terraform plan -out=tfplan-prod
      - uses: actions/upload-artifact@v4
        with:
          name: tfplan-prod
          path: glue/envs/prod/tfplan-prod

  # ==========================================================
  # 8Ô∏è‚É£ APPROVE APPLY TO PROD?
  # ==========================================================
  approve-prod-apply:
    name: ‚úÖ Approve Apply to PROD?
    needs: [plan-prod]
    if: ${{ needs.plan-prod.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Manual Approval - Apply to PROD?
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: mostafasookar
          minimum-approvals: 1
          issue-title: "Approve Apply to PROD?"
          issue-body: |
            Approve to apply Terraform plan in PROD.
            If declined, pipeline ends cleanly.

  # ==========================================================
  # 9Ô∏è‚É£ APPLY PROD
  # ==========================================================
  apply-prod:
    name: üöÄ Apply PROD
    needs: [approve-prod-apply]
    if: ${{ needs.approve-prod-apply.result == 'success' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: glue/envs/prod
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION_PROD }}
      - uses: hashicorp/setup-terraform@v3
      - uses: actions/download-artifact@v4
        with:
          name: tfplan-prod
          path: glue/envs/prod
      - run: terraform init -backend-config=backend-prod.tfvars
      - run: terraform apply -auto-approve tfplan-prod
